================================================================================
v2.12 Intel Intelligent Storage Acceleration Library Release Notes
================================================================================

================================================================================
RELEASE NOTE CONTENTS
================================================================================
1. KNOWN ISSUES
2. FIXED ISSUES
3. CHANGE LOG & FEATURES ADDED

================================================================================
1.  KNOWN ISSUES
================================================================================

* Perf tests do not run in Windows environment.

* The new Hashing API requires its applications to be compiled with clang on 
  FreeBSD 9.0 and 9.1.

* Leaving <unit>/bin directories from builds in unit directories will cause the
  top-level make build to fail.  Build only in top-level or ensure unit
  directories are clean of objects and /bin.

* On Windows OS, if building the igzip code with the 32K window option enabled, 
  the link option /LARGEADDRESSAWARE:NO must be added.

* 32-bit lib is not supported in Windows.

* The binary release package is not supported on Windows or 32-bit systems.

* In igzip, using a 32K window with a shared object is not supported.

================================================================================
2. FIXED ISSUES
================================================================================
v2.12

* Fix to igzip: when compiled with MAJOR_VERSION=IGZIP1, igzip could generate
  non-compliant compressed files.  With previous versions of igzip, when
  selecting compile option IGZIP1 (one of the compile-time non-default options
  described in igzip_lib.h), in rare cases of input stream fast_lz() can produce
  an invalid compressed stream.  Fixed with upgrade to 2.12 or choose other
  MAJOR_VERSION.  Default build options are not susceptible to the issue.

v2.11

* Some igzip_lib.h internal defines are renamed to avoid conflicts.

v2.10

* Fix for windows register save overlap in gf_{3-6}vect_dot_prod_sse.asm. Only
  affects windows versions of erasure code.  GP register saves/restore were
  pushed to same stack area as XMM.

v2.9

* Multi-buffer MD5 AVX2 tests fixed to work on FreeBSD 9.1 by explicitly aligning
  structures. 

v2.8

* Bug fix for 32-bit version of RAID6 pq_gen_sse, pq_check_sse.

* Fixed deflate header issue in igzip for the non-sync flush case. The header
  being written did not have the BFINAL flag set.

v2.7

* Bug fix for raid pq_gen functions for small buffer len

  The functions pq_gen_sse, pq_gen_avx, pq_gen_avx2 and pq_check_sse could
  return incorrect parity for very short length buffers.  Errors could be seen
  only if len < 48 bytes for pq_gen_sse, pq_gen_avx, pq_check_sse or when len <
  96 bytes for pq_gen_avx2.

* Unit tests and examples are now supported in Windows environment

v2.6 

* Bug fix for crc16_t10dif, crc32_ieee - readover issue.

  For small length crc calculation at the edge of a page boundary it was
  possible to read over a boundary and cause a page fault.  Crc results were not
  affected.

* Fix for function version numbers.

  Some function version numbers were written in reflected order.  Fixed so all
  are in consistent order when reading <func>_slver.

v2.3

* Bug Fixes for RAID6 functions pq_gen_sse, pq_check_sse.


================================================================================
3. CHANGE LOG & FEATURES ADDED 
================================================================================
v2.12

* New stateless compression routine - fast_lz_stateless().  Stateless/one shot
  compression has a similar interface to fast_lz() but operates on an entire
  input buffer at one time.  By removing the streaming and buffering facilities
  a number of improvements are seen.  Performance on random data and constant or
  zero blocks are greatly improved.  Max expansion ratio is limited to just the
  fraction added from a stored/raw block header.

* New vector memory functions.  Vector versions of memory copy, compare and zero
  detect augment the standard library versions and are faster under some
  conditions of block size and usage.

v2.11

* Incremental erasure code.  New functions added to erasure code to handle
  single source update of code blocks.  The function ec_encode_data_update()
  works with parameters similar to ec_encode_data() but are called incrementally
  with each source block.  These versions are useful when source blocks are not
  all available at once.

v2.10

* Erasure code updates
  - New AVX and AVX2 support functions.
  - Changes min len requirement on gf_vect_dot_prod() to 32 from 16.
  - Tests include both source and parity recovery with ec_encode_data().
  - New encoding examples with Vandermonde or Cauchy matrix.

* Added multi-buffer MD5 in the new hash API.  Includes multi-binary capability,
  no restriction on update length and other benefits of the CTX API.

v2.9

* New multi-buffer hash API.  The new API brings the following new features to
  multi-buffer hashes.  The older API is still included but may be deprecated in
  future releases.

  - Multibinary functionality.  Call one function and the appropriate
    architecture-specific version is fixed up at runtime.

  - No restriction on update length.  Submitting an update block no longer has
    to have length a multiple of the fundamental block size.

* New igzip configurations supported IGZIP0, IGZIP1, and IGZIP1C.  Options give
  more control over desired compression level and PCLMULQDQ requirement.

* New Silvermont-optimized functions - crc16_t10dif_by4 and crc32_ieee_by4 -
  are added.  Multibinary support for these versions is also added.

* New expanded key tests added for AES-XTS 128 and 256

v2.8

* Erasure code improvements:
  - No pointer alignment restrictions.
  - No buffer length restrictions in ec_encode_data().
  - For low-level functions, buffer length no longer must be a multiple of 16.
  - 32-bit compile support on Linux / FreeBSD.
  - Base functions include option for large-table look-up optimization.

v2.7

* New AVX2 versions for mb_md5 and mb_sha512 hashing code have been added.

* New updates for functions crc16_t10dif and crc32_ieee.  By-8 versions perform
  much better on Haswell and newer processors.

* New multibinary support added for crc, raid and erasure_code functions.  New
  multibinary functions that determine an appropriate version at first run can
  be called instead of the architecture-specific versions.  This allows users to
  deploy a single binary with multiple function versions and choose at run time
  based on platform features.  Users can still call the architecture-specific
  versions directly to reduce code size.

v2.6

* Update buffer functionality added to mb_md5, mb_sha256 and mb_sha512 hashing
  code.  Requires API changes to current interface to specify job type and total
  length of hash.

* New AVX2 versions for mb_sha1 and mb_sha256 hashing code have been added.

* New AVX and AVX2 RAID functions xor_gen_avx, pq_gen_avx, pq_gen_avx2 and
  gf_vect_mul_avx.

* Less restrictive source alignment requirement for pq_gen_sse and pq_check_sse.
  Functions changed to work with 16 byte source alignment instead of 64 bytes.

v2.5

* New feature for multi-buffer SHA-1, update buffer.  mb_sha1 non-finalize jobs
  can now be submitted by setting flags in job structure.  Requires API changes
  to current interface to specify job type and total length of hash.

v2.4

* Added new multi-buffer SHA-512: mb_sha512.  SSE, AVX versions.

v2.3

* Added improved AES XTS versions.

v2.2

* Added new AVX versions of multi-buffer hashes
* Changed type in the interface struct for multi-buffer hashes
  the len field in the following structures :JOB_SHA1,JOB_MD5,
  JOB_SHA256 is now a 32-bit int.

v2.1

* Added new unit - igzip storage compression functions.
* Added new high-level erasure code functions.

v2.0

* Added AES XTS units aes_xts_128, aes_xts_256
* Added unit erasure_code

v1.3 

* Added new multi-buffer units for SHA-256 and MD5: mb_sha256, mb_md5.
* Added new CRC functions: iSCSI definition with various implementations.

v1.2

* Added RAID optimized functions.  
  xor_gen_sse, xor_check_sse, pq_gen_sse, pq_check_sse
